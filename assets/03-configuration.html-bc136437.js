import{_ as r,r as c,o as d,c as h,a,d as e,b as t,w as i,e as n}from"./app-515fa09f.js";const p={},l=n('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Remember to clear the cache after every configuration change. See <a href="#clearing-the-cache">clearing the cache</a>.</p></div><p>You must configure the system before it can be used. The environment configurations are stored in the <code>.env</code> files.</p><p>First, copy the <code>.env</code> file to a new file named <code>.env.local</code>. Then, edit <code>.env.local</code> to fit your environment.</p><p>While most environmental variables will work out-of-the-box for development purposes, you most certainly need to change the database URL.</p><div class="custom-container danger"><p class="custom-container-title">CAUTION</p><p>In production, you MUST change the secret values <code>APP_SECRET</code> and <code>JWT_KEY</code> (see <a href="#secrets">secrets</a>)!</p><p>Also change <code>APP_ENV</code> to <code>prod</code> when in production.</p></div>',6),u=n(`<h2 id="database" tabindex="-1"><a class="header-anchor" href="#database" aria-hidden="true">#</a> Database</h2><p>The value of <code>DATABASE_URL</code> should be changed to match your database configuration.</p><p>The following line explains what each field is for:</p><div class="language-env" data-ext="env"><pre class="language-env"><code>DATABASE_URL=&quot;mysql://username:password@127.0.0.1:3306/dbname?serverVersion=8&amp;charset=utf8mb4&quot;
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Change <code>username</code>, <code>password</code>, <code>dbname</code> to the appropriate values. You should also ensure that the IP address, port, and server version match your configuration.</p></div>`,5),m={href:"https://symfony.com/doc/current/doctrine.html#configuring-the-database",target:"_blank",rel:"noopener noreferrer"},f=n(`<h3 id="creating-a-database" tabindex="-1"><a class="header-anchor" href="#creating-a-database" aria-hidden="true">#</a> Creating a database</h3><p>If the database specified in <code>DATABASE_URL</code> does not already exist, Symfony can create it for you.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>php bin/console doctrine:database:create
</code></pre></div><p>Then, run the following command to create the required tables:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>php bin/console doctrine:schema:create
</code></pre></div><h2 id="secrets" tabindex="-1"><a class="header-anchor" href="#secrets" aria-hidden="true">#</a> Secrets</h2><p>In production, the secret values must be rotated to prevent attacks.</p><p>For <code>APP_SECRET</code>, generate a value through PHP using the following line (you can start an interactive session from the command line using <code>php -a</code>):</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>For <code>JWT_KEY</code>, use this line:</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="mail" tabindex="-1"><a class="header-anchor" href="#mail" aria-hidden="true">#</a> Mail</h2>`,12),g={class:"custom-container tip"},v=a("p",{class:"custom-container-title"},"TIP",-1),b={href:"https://symfony.com/doc/current/mailer.html#transport-setup",target:"_blank",rel:"noopener noreferrer"},_=n(`<p>The system requires additional configuration for sending emails (for authentication purposes). Email authentication serves as a backup to Azure AD authentication. <code>MAILER_DSN</code> should be changed to match the configuration.</p><h3 id="smtp" tabindex="-1"><a class="header-anchor" href="#smtp" aria-hidden="true">#</a> SMTP</h3><p>If using a SMTP server to send emails, set <code>MAILER_DSN</code> according to the following example.</p><div class="language-text" data-ext="text"><pre class="language-text"><code>smtp://user:pass@smtp.example.com:25
</code></pre></div><h3 id="microsoft-graph" tabindex="-1"><a class="header-anchor" href="#microsoft-graph" aria-hidden="true">#</a> Microsoft Graph</h3><p>During development, the system was made to send emails on behalf of Microsoft account owners (e.g. from an @connect.ust.hk email address).</p><p>This functionality can be used in production but requires additional setup and maintenance.</p><h4 id="obtaining-tokens" tabindex="-1"><a class="header-anchor" href="#obtaining-tokens" aria-hidden="true">#</a> Obtaining tokens</h4>`,8),x=n(`<p>In addition, set the environmental variable <code>EMAIL_SENDER</code> to the email address of the Microsoft account that emails will be sent from.</p><h4 id="authorizing-user" tabindex="-1"><a class="header-anchor" href="#authorizing-user" aria-hidden="true">#</a> Authorizing user</h4><p>Next, you should authorize the application with a Microsoft account so that the application can send emails on the account&#39;s behalf.</p><p>First, login into the system as an admin. Then, go to the</p><h4 id="batch-job-setup" tabindex="-1"><a class="header-anchor" href="#batch-job-setup" aria-hidden="true">#</a> Batch job setup</h4><h2 id="azure-active-directory" tabindex="-1"><a class="header-anchor" href="#azure-active-directory" aria-hidden="true">#</a> Azure Active Directory</h2><h2 id="cloud-file-storage" tabindex="-1"><a class="header-anchor" href="#cloud-file-storage" aria-hidden="true">#</a> Cloud file storage</h2><h2 id="dumping-to-php" tabindex="-1"><a class="header-anchor" href="#dumping-to-php" aria-hidden="true">#</a> Dumping to <code>.php</code></h2><p>You may choose to dump the contents of the <code>.env</code> files to a php file for increased performance.</p><p>It can be done using the command, which copies the content of the <code>.env</code> and <code>.env.local</code> files to <code>.env.local.php</code> and sets the environment to <code>prod</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> dump-env prod
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Note that <code>.env.local.php</code> takes precedence over all other <code>.env</code> files. All changes to the environment should be made in the <code>.php</code> file from now on.</p></div><h2 id="clearing-the-cache" tabindex="-1"><a class="header-anchor" href="#clearing-the-cache" aria-hidden="true">#</a> Clearing the cache</h2><p>The cache should be cleared whenever a change to the configuration is made.</p><p>After properly configuring the system, clear the cache using the following command:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>php bin/console cache:clear
</code></pre></div><p>The environment can be specified using the <code>--env</code> option.</p>`,17);function y(k,A){const o=c("RouterLink"),s=c("ExternalLinkIcon");return d(),h("div",null,[l,a("p",null,[e("See the "),t(o,{to:"/reference/envvars.html"},{default:i(()=>[e("environmental variable reference")]),_:1}),e(" for all available configuration values.")]),u,a("p",null,[e("See the "),a("a",m,[e("Symfony docs"),t(s)]),e(" for more details.")]),f,a("div",g,[v,a("p",null,[e("For other mail transports (e.g. Amazon SES, Mailgun, Sendgrid, etc.), see "),a("a",b,[e("Symfony docs"),t(s)]),e(" for the DSN formats.")])]),_,a("p",null,[e("Refer to the "),t(o,{to:"/setup/04-aad-setup.html"},{default:i(()=>[e("guide to setup Azure Active Directory")]),_:1}),e(" and follow the steps to set up an app registration for sending emails.")]),x])}const w=r(p,[["render",y],["__file","03-configuration.html.vue"]]);export{w as default};
